@layout EventLayout

<PageHeadTitle Title="Мероприятия" Count="List?.TotalCount" Loading="IsLoading"></PageHeadTitle>

@if (List is { Permissions.Create: true })
{
    <AntDesign.Button OnClick="CreateAsync" Loading="IsCreateLoading" Icon="plus" Type="@ButtonType.Link" Size="small">Добавить</AntDesign.Button>
}

<Loading Spinning="IsLoading">
    @if (List != null)
    {
        <div class="row">
            <div class="col-md-12">
                @foreach (var item in List.Items)
                {
                    <BoxCard>
                        <Body>
                        <div class="row">
                            <div class="col">
                                <div class="text-label">Наименование</div>
                                <div>@item.Name</div>
                            </div>
                            <div class="col">
                                <div class="text-label">Дата проведения</div>
                                <div>@item.DateEvent.ToString("D")</div>
                            </div>
                            <div class="col">
                                <div class="text-label">Тип события</div>
                                <div>@item.EventType</div>
                            </div>
                            <div class="col">
                                <div class="text-label">Ответственный</div>
                                <div>@item.ResponsibleUser</div>
                            </div>
                        </div>
                        </Body>
                        <ActionTemplate>
                            <Space Size="@("1")">
                                @if (item.Permissions.Edit)
                                {
                                    <SpaceItem>
                                        <NavLink href="@($"catalogs/event/{item.Id}")" class="px-2">
                                            <span class="fa fa-pencil"></span>
                                        </NavLink>
                                    </SpaceItem>
                                }
                                @if (item.Permissions.Delete)
                                {
                                    <SpaceItem>
                                        <DeleteConfirm OnConfirm="async () => { await DeleteAsync(item); }"/>
                                    </SpaceItem>
                                }
                            </Space>
                        </ActionTemplate>
                    </BoxCard>
                }
            </div>
        </div>
    }
</Loading>

@code {
    [Inject]
    protected NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    protected EventService EventService { get; set; } = null!;

    private EventDtoJournal List { get; set; } = null!;

    private bool IsLoading { get; set; }

    public bool IsCreateLoading { get; set; }

    protected async Task GetListAsync()
    {
        IsLoading = true;
        StateHasChanged();
        var response = await EventService.GetJournalAsync();

        if (response.Ok)
            List = response.Value;

        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await GetListAsync();
    }

    private async Task CreateAsync()
    {
        IsCreateLoading = true;
        StateHasChanged();

        var response = await EventService.CreateAsync();

        if (response.Ok)
            NavigationManager.NavigateTo($"catalogs/event/{response.Value.Data.Id}");

        IsCreateLoading = false;
    }

    private async Task DeleteAsync(EventDtoJournalItem item)
    {
        var response = await EventService.DeleteAsync(item);
        if (response.Ok)
        {
            await GetListAsync();
        }
    }
}
