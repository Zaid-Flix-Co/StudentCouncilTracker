@inject ModalService ModalService

@page "/catalogs/event/{eventId:int}"

<PageHeadTitle Title="Мероприятия"></PageHeadTitle>

@if (Event != null)
{
    <EditForm Model="Event.Data" OnSubmit="@SaveEvent">
        <div class="row">
            <div class="col-md-8">
                <FormElement @bind-Control="Event.Data.Name" />
                <FormElement @bind-Control="Event.Data.EventType" />
                <FormElement @bind-Control="Event.Data.ResponsibleUser" />
                <FormElement @bind-Control="Event.Data.DateEvent" />
                <FormElement @bind-Control="Event.Data.Description" />
                <FormElement @bind-Control="Event.Data.IsDeactivated" />
            </div>
        </div>

        <div class="sticky-bottom">
            <SaveButton IsLoading="IsLoading" />
            <NavLink href="@($"{NavigateLink}/events")">
                <AntDesign.Button Type="@ButtonType.Link">Закрыть</AntDesign.Button>
            </NavLink>
        </div>
    </EditForm>

    <br />
    <EventActionsPage EventId="EventId" />
}

@code {
    [Parameter]
    public int EventId { get; set; }

    [Inject]
    protected EventService EventService { get; set; } = null!;

    [Inject]
    private IMessageService MessageService { get; set; } = null!;

    private bool _visible;

    protected EventDto Event { get; set; } = null!;

    private bool IsLoading { get; set; }

    private string NavigateLink { get; set; } = string.Empty;

    protected async Task GetEvent()
    {
        var result = await EventService.GetCardAsync(EventId);
        if (result.Ok)
            Event = result.Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
#if (RELEASE)
        NavigateLink = "/skt";
#endif

            await GetEvent();
            StateHasChanged();
        }
    }

    private void HandleInfo()
    {
        RenderFragment content =@<div>
        <p>Поле <b>Наименование мероприятия</b> обязательно для заполнения</p>
    </div>;
        ModalService.Info(new ConfirmOptions()
            {
                Title = "Предупреждение",
                Content = content
            });
    }

    protected async Task SaveEvent()
    {
        IsLoading = true;
        StateHasChanged();

        if (Event.Data.Name.Value.IsNullOrEmpty())
        {
            HandleInfo();
        }
        else
        {
            var result = await EventService.PutCardAsync(Event);
            if (result.Ok)
            {
                await GetEvent();
                StateHasChanged();
            }
        }

        IsLoading = false;
    }
}
