@page "/"
@inject IJSRuntime JsRuntime
@inject IUserProvider UserProvider

<PageTitle>Главная страница</PageTitle>

@if (HasAccessToken)
{
    <EventActionChart />
}
else
{
    <div class="main-container">
        <img class="imgMeeting" src="images/китт.png" alt="KIT" />
        <div class="content">
            <h1 class="hMeeting">@GreetingMessage</h1>
            <p class="pMeeting"><b>SovetTracker</b> - система управления проектами <br />студенческого совета KIT++</p>
        </div>
    </div>
}

<style>
    .main-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        padding: 20px;
        box-sizing: border-box;
    }

    .imgMeeting {
        width: 40%;
        height: auto;
        border-radius: 5px;
        margin-right: 20px;
    }

    .content {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .hMeeting {
        font-family: 'Montserrat Medium', sans-serif;
        font-size: 2.5em;
        color: black;
        margin: 0 0 10px 0; /* Adjusted margin */
    }

    .pMeeting {
        font-family: 'Montserrat Light', sans-serif;
        font-size: 1.5em;
        color: black;
        margin-top: 10px;
        max-width: 90%;
    }
</style>

<script>
    window.getCookie = function (key) {
        var value = "";
        document.cookie.split(';').forEach(function (cookie) {
            var parts = cookie.split('=');
            if (parts.length === 2 && parts[0].trim() === key) {
                value = parts[1].trim();
            }
        });
        return value;
    };

    window.deleteCookie = function (key) {
        document.cookie = key + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    };
</script>

@code
{
    private string? GreetingMessage { get; set; }

    protected override void OnInitialized()
    {
        UpdateGreetingMessage();
    }

    private void UpdateGreetingMessage()
    {
        var currentTime = DateTime.Now.TimeOfDay;
        if (currentTime < TimeSpan.FromHours(12))
        {
            GreetingMessage = "Доброе Утро!";
        }
        else if (currentTime < TimeSpan.FromHours(18))
        {
            GreetingMessage = "Добрый день!";
        }
        else if (currentTime < TimeSpan.FromHours(22))
        {
            GreetingMessage = "Добрый вечер";
        }
        else
        {
            GreetingMessage = "Доброй ночи!";
        }
    }

    private bool HasAccessToken { get; set; }

    private async Task<string> GetCookieValue(string key)
    {
        return await JsRuntime.InvokeAsync<string>("getCookie", key);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await GetCookieValue("AccessToken");

            if (!result.IsNullOrEmpty())
                UserProvider.ParseJwt(result);

            HasAccessToken = !string.IsNullOrEmpty(result);
            StateHasChanged();
        }
    }
}
