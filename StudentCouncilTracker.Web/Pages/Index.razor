@page "/"
@inject IJSRuntime JsRuntime
@inject IUserProvider UserProvider

<PageTitle>Главная страница</PageTitle>

@if(HasAccessToken)
{
    <EventActionChart/>
}
else
{
    <div class="container">
        <div class="divwithphoto">
            <h1 class="hMeeting">@GreetingMessage</h1>
            <img class="imgMeeting" src="images/ssphoto.jpg" alt="Фото совета" />
            <p class="pMeeting">фцвфцвцввввввввцвввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввввв</p>
        </div>
    </div>
}

<style>
    .container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh; 
    }

    .pMeeting{
        font-family: Montserrat Light;
        color: black;
        margin-top: 10px;
    }

    .divwithphoto {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        background-color: lightgray;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        max-width: 90%;
        text-align: center;
    }

    .hMeeting {
        font-family: Montserrat Medium;
        font-size: 2em;
        color: black;
        margin: 0 0 20px 0;
    }

    .imgMeeting {
        width: 80%;
        height: 50%; 
        border-radius: 5px;
    }
</style>

<script>
    window.getCookie = function (key) {
        var value = "";
        document.cookie.split(';').forEach(function (cookie) {
            var parts = cookie.split('=');
            if (parts.length === 2 && parts[0].trim() === key) {
                value = parts[1].trim();
            }
        });
        return value;
    };

    window.deleteCookie = function (key) {
        document.cookie = key + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    };
</script>

@code
{
    private string? GreetingMessage { get; set; }

    protected override void OnInitialized()
    {
        UpdateGreetingMessage();
    }

    private void UpdateGreetingMessage()
    {
        var CurrentTime = DateTime.Now.TimeOfDay;
        if(CurrentTime < TimeSpan.FromHours(12))
        {
            GreetingMessage = "Доброе Утро!";
        }
        else if(CurrentTime < TimeSpan.FromHours(18))
        {
            GreetingMessage = "Добрый день!";
        }
        else if(CurrentTime < TimeSpan.FromHours(22))
        {
            GreetingMessage = "Добрый вечер";
        }
        else
        {
            GreetingMessage = "Доброй ночи!";
        }
    }

    private bool HasAccessToken { get; set; }

    private async Task<string> GetCookieValue(string key)
    {
        return await JsRuntime.InvokeAsync<string>("getCookie", key);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var result = await GetCookieValue("AccessToken");

            if (!result.IsNullOrEmpty())
                UserProvider.ParseJwt(result);

            HasAccessToken = !string.IsNullOrEmpty(result);
            StateHasChanged();
        }
    }
}
